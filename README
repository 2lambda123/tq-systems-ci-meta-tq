TQ ARM modules Yocto integration test
=====================================

Supported boards
----------------

see README of TQ Sytems layer (meta-tq) or use ./ls-machines

Quick Start Guide
-----------------

Clone this repo using git clone --branch=<branch-name> --recurse-submodules <url>

current supported branches:
- krogoth
- morty
- pyro
- rocko (currently no i.MX mfgtool support)
- rocko-tqma8x (only for TQMa8 platforms, based on NXP BSP)
- sumo-tqma8x (only for TQMa8 platforms, based on NXP BSP)

branch names correspond to yocto release names

When switching branches keep in mind to keep the submodules in sync:

git submodule sync
git submodule update --init

To list supported machines:

./ls-machines

To help setting up an initial build space, use

export MACHINE=<machine> && source fsl-setup-release -b <builddir>

MACHINE: default tqma8mq-mba8mx or value from environment
SDKMACHINE: default i686 or value from environment
DISTRO: default fsl-imx-wayland or value from environment, only the default
is tested

Attention: setup logic from NXP BSP will change / overwrite some definitions
in meta-freescale. Therefore you will notice changes in meta-freescale.

In case you have ~/.oe or ~/.yocto dir a site.conf file will be symlinked to
the conf dir of the buildir to allow machine specific overrrides. For instance 
to use a shared download directory, you can provide $DL_DIR via ~/.yocto/site.conf.

Internally the oe-init-build-env script from the
used openembedded / poky meta layer will be sourced indirectly
via setup-environment

To return to a initially setup build space, use

source setup-environment <builddir>

After this step, everything is setup to build an image using bitbake.

================================================================================

Support for reproducible build environment

Devolopment and automated builds are supported by the scripts under ci

1) To build all supported machines in one of the configs, one can
use the CI helper script:

ci/build-all <builddir> gui

Note: only gui config is supported for this branch, it will build tq-image-qt5
(based on the qt5 demo image defined in meta-fsl-bsp-release/imx/meta-bsp)

2) To help to create a package mirror, one can use the CI helper script:

ci/build-all <builddir> <config> mirror

and define the following stuff in your site.conf:

SOURCE_MIRROR_URL ?= "file://<full path>/"
INHERIT += "own-mirrors"

PREMIRRORS_prepend = "\
        git://.*/.* file://full path>/ \n \
        ftp://.*/.* file://full path>/ \n \
        http://.*/.* file://full path>/ \n \
        https://.*/.* file://full path>/ \n \
        "

To fill the mirror, the script 
- allows to create also tarballs from SCM using BB_GENERATE_MIRROR_TARBALLS=1 
- forces downloads for uninative packages by INHERIT_remove = \"uninative\""
- copies all archives from DL_DIR to the mirror

This way the mirror can be used to do offline builds without downloading anything
with BB_FETCH_PREMIRRORONLY=1

3) To force a clean build of all supported machines and generate archives, do_configure

ci/build-all <builddir> <config> ci

Most of the configuration data is held under source/template, notably

- sample bblayer.conf files
- sample auto.conf files and inclusion fragments (see Yocto Project doc for
  local.conf and auto.conf

================================================================================

Security

This project is focused on board bringup and demonstration for TQ Systems starter
kits. Since embedded projects have different goals, the Yocto Project brings lots
of features to modify system configuration and setup. This project is not a turn
key distribution but a starting point fro own developments.

RootFS created with this setup has for demonstration purpose and ease of
development not root password set.
