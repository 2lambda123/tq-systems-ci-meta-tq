#!/bin/bash
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# Copyright (C) TQ-Systems GmbH
# 2017 - 2021 Markus Niebel <Markus.Niebel@tq-group.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.

CWD=$(pwd)
PROGNAME="setup-environment"
LIST_TQ_MACHINES=$(${CWD}/ci/ls-machines meta-tq)
DEFAULT_MACHINE=$(echo ${LIST_TQ_MACHINES} | awk '{ print $1 }')
CONFIG_TEMPLATE=minimal
# conf templates
TEMPLATECONF=${CWD}/sources/template/conf

DEFAULT_DISTRO_minimal="spaetzle"
DEFAULT_DISTRO_imx="dumpling-wayland-nxp"
DEFAULT_DISTRO_ls="dumpling"
DEFAULT_DISTRO_ti="dumpling-wayland-ti"

usage()
{
    echo -e "
Usage: MACHINE=<machine> DISTRO=<distro> source $PROGNAME <build-dir> <template>
Usage:                                   source $PROGNAME <build-dir> <template>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory
	<template>: template bblayers.conf to use (optional)

The first usage is for creating a new build directory. In this case, the
script creates the build directory <build-dir>, configures it for the
specified <machine> and <distro>, and prepares the calling shell for running
bitbake on the build directory.

The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.
"

    ls sources/meta-tq/conf/machine/*.conf > /dev/null 2>&1
    ls sources/meta-dumpling/conf/distro/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "
Supported machines: `echo; ls sources/meta-tq/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Supported TQ's distros: `echo; ls sources/meta-dumpling/conf/distro/*.conf\
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Available Poky's distros: `echo; ls sources/poky/meta-poky/conf/distro/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Examples:

- To create a new Yocto build directory:
  $ MACHINE=imx6qdlsabresd DISTRO=fslc-framebuffer source $PROGNAME build

- To use an existing Yocto build directory:
  $ source $PROGNAME build
"
    fi
}

clean_up() {
	unset EULA LIST_MACHINES VALID_MACHINE
	unset CWD TEMPLATECONF SHORTOPTS LONGOPTS ARGS PROGNAME
	unset generated_config updated
	unset MACHINE SDKMACHINE DISTRO OEROOT
}

##############
# handle differnt type of licenses and cope with CI build setup
# $1        - EULA_TYPE [NXP, FSL, TI, QT5]
# $2 ... $n - names of LICENSE files needed to accept
#
# - check for ACCEPT_${EULA_TYPE}_EULA in [local,auto].conf
# - check for ${EULA} in env
# if not set, show LICENSE files given with a preface depending on ${EULA_TYPE}
# and query for acception. If accepted, set ACCEPT_${EULA_TYPE}_EULA in local.conf
# Additionally add 'NXP-EULA-v24' to the list of enabled licenses if ${EULA_TYPE}
# is 'NXP''
##############
handle_eula() {
	local EULA_TYPE="${1}"
	shift
	local EULA_FILES="${@}"
	# Handle EULA setting
	local EULA_ACCEPTED=

	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/local.conf; then
		EULA_ACCEPTED=1
	fi
	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/auto.conf; then
		EULA_ACCEPTED=1
	fi

	if [ -z "${EULA_ACCEPTED}" ] && [ -n "${EULA}" ]; then
		# The EULA is not set as accepted in [local,auto].conf, but the EULA
		# variable is set in the environment, so we just configure
		# ACCEPT_${EULA_TYPE}_EULA in local.conf according to $EULA.
		echo "ACCEPT_${EULA_TYPE}_EULA = \"${EULA}\"" >> conf/local.conf
	elif [ -n "${EULA_ACCEPTED}" ]; then
		# The EULA has been accepted once, so ACCEPT_${EULA_TYPE}_EULA is set
		# in local.conf.  No need to do anything.
		:
	else
		# The EULA is not set as accepted in local.conf / auto.conf,
		# and EULA is not set in the environment, so we need to ask user
		# if he/she accepts the EULA:

		case ${EULA_TYPE} in
			FSL|NXP)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by NXP's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...
EOF
				;;
			TI)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by TI's licenses
(TI-TFL and TI-TSPA). To have the right to use these software in your images,
you need to read and accept the following...
EOF
				;;
			QT5)
cat <<EOF
The BSP configuration includes meta-qt5. This BSP is configured to build the
Open Source version of Qt5. Therefore you need to read and accept the following ...
EOF
				;;
		esac

		sleep 4

		more -d ${EULA_FILES}
		echo
		REPLY=
		while [ -z "${REPLY}" ]; do
			echo -n "Do you accept the EULA you just read? (y/n)"
			read REPLY
			case "${REPLY}" in
			y|Y)
				echo "EULA has been accepted."
				echo "ACCEPT_${EULA_TYPE}_EULA = \"1\"" >> conf/local.conf
				;;
			n|N)
				echo "EULA has not been accepted."
				;;
			*)
				REPLY=
				;;
			esac
		done
	fi
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options ${SHORTOPTS}  \
  --longoptions ${LONGOPTS} --name ${PROGNAME} -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "${ARGS}"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ -z "${MACHINE}" ]; then
    MACHINE=${DEFAULT_MACHINE}
fi

if [ ! -e $1/conf/local.conf.sample ]; then
    build_dir_setup_enabled="true"
else
    build_dir_setup_enabled="false"
fi

if [ "${build_dir_setup_enabled}" = "true" ] && [ -z "${MACHINE}" ]; then
    usage
    echo -e "ERROR: You must set MACHINE when creating a new build directory."
    clean_up
    return 1
fi

if ! [ -z "${2}" ]; then
    CONFIG_TEMPLATE=${2}
fi

BBLAYERS_TEMPLATE=bblayers.conf.${CONFIG_TEMPLATE}

# Check the machine type specified
LIST_MACHINES=$(ls -1 ${CWD}/sources/*/conf/machine)
VALID_MACHINE=$(echo -e "${LIST_MACHINES}" | grep ${MACHINE}.conf$ | wc -l)
if [ -z "${MACHINE}" ] || [ "${VALID_MACHINE}" -eq "0" ]; then
    echo -e "\nThe \$MACHINE you have specified (${MACHINE}) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e $1/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "${SDKMACHINE}" ]; then
    SDKMACHINE="i686"
fi

if [ -z "${DISTRO}" ]; then
    DISTRO_VAR=DEFAULT_DISTRO_${CONFIG_TEMPLATE}
    eval DISTRO=\$$DISTRO_VAR
fi

if [ "$build_dir_setup_enabled" = "true" ] && [ -z "${DISTRO}" ]; then
    usage
    echo -e "ERROR: You must set DISTRO when creating a new build directory."
    clean_up
    return 1
fi

OEROOT="${CWD}/sources/poky"
if [ -e "${CWD}/sources/oe-core" ]; then
    OEROOT="${CWD}/sources/oe-core"
fi

BB_ENV_EXTRAWHITE="${BB_ENV_EXTRAWHITE} TQ_GIT_BASEURL TQ_GIT_PROTOCOL"

. "${OEROOT}/oe-init-build-env" ${CWD}/${1} > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e "conf/local.conf" ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo ${PATH} | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ "$build_dir_setup_enabled" = "true" ]; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the defaults
    grep -v '^#\|^$' "conf/local.conf.sample" > "conf/local.conf"

    echo "link additional includes from ${TEMPLATES} to ./conf/ ..."
    FILES=$(find "${TEMPLATECONF}" -maxdepth 1 -type f -name "*.inc")
    echo "link ${FILES}"
    for f in ${FILES}; do
        ln -s ${f} conf/$(basename ${f})
    done

    echo "link auto.conf templates from ${TEMPLATES} to ./conf/ ..."
    FILES=$(find "${TEMPLATECONF}" -maxdepth 1 -type f -name "auto.conf*")
    echo "link ${FILES}"
    for f in ${FILES}; do
        ln -s ${f} conf/$(basename ${f})
    done

    ln -s "${TEMPLATECONF}/auto.conf.normal" ./conf/auto.conf
    ! [ -e ./conf/auto.conf ] && "missing auto.conf" && clean_up && return 1

    # copy local bblayers.conf templates
    if [ -e "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" ]; then
        ln -s "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" conf/bblayers.conf.tmpl
        cp "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" conf/bblayers.conf
    fi

    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= \"${MACHINE}\",g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= \"${SDKMACHINE}\",g" \
        -e "s,DISTRO ?=.*,DISTRO ?= \"${DISTRO}\",g" \
        -i conf/local.conf

    # check for site.conf and create link if available
    for s in ${HOME}/.oe ${HOME}/.yocto; do
        if [ -e ${s}/site.conf ]; then
            echo "Linking ${s}/site.conf to conf/site.conf"
            ln -s ${s}/site.conf conf
        fi
    done

    generated_config=1
fi

# call handle_eula if meta-freescale is in conf/bblayers.conf
# otherwise call it for meta-tq
if grep -q "meta-freescale" conf/bblayers.conf; then
	handle_eula FSL "${CWD}/sources/meta-freescale/EULA"
else
	handle_eula NXP "${CWD}/sources/meta-tq/NXP-EULA"
fi

if grep -q "meta-ti" conf/bblayers.conf; then
	handle_eula TI "${CWD}/sources/meta-ti/licenses/TI-TFL ${CWD}/sources/meta-ti/licenses/TI-TSPA"
fi

if grep -q "meta-qt5" conf/bblayers.conf; then
	handle_eula QT5 "${CWD}/sources/meta-qt5/licenses/Digia-Qt-LGPL-Exception-1.1 \
		${CWD}/sources/meta-qt5/licenses/The-Qt-Company-GPL-Exception-1.0"
fi

# print welcome banner ...
if [ -e "${TEMPLATECONF}/conf-notes.txt" ]; then
    cat "${TEMPLATECONF}/conf-notes.txt"
fi

# finally give info whether we use an existing buildspace or
# just created a new one ...
if [ -n "${generated_config}" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=${MACHINE}
    SDKMACHINE=${SDKMACHINE}
    DISTRO=${DISTRO}
    EULA=${EULA}
EOF
else
    echo "Your configuration files at $1 have not been touched."
    cmp conf/bblayers.conf conf/bblayers.conf.tmpl > /dev/null
    [ "$?" -ne "0" ] && echo "Your conf/bblayers.conf (or the template changed)"
fi

clean_up
