#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2017-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel
#
# Description: list all machines in a layer
#
###############################################################################

set -e
set -C # noclobber

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

# TRAP SIGNALS
trap 'error_abort $LINENO' ERR

function error_abort () {
	echo "error at $1"
}

. ${SCRIPTPATH}/utils

readonly DEFAULT_LAYER_DIR="./sources/meta-tq/meta-tq"

usage() {
	cat <<END
${SCRIPTNAME} usage:

List available machines either from config file or from template directory

$1 --dir[=<directory>]
use default template dir ${DEFAULT_TEMPLATEDIR} or directory
Note: directory needs to have the structure of a layer and distros are
under <layer dir>/conf/distro/.
$1 --file[=<filename>] --config=<name>
use default config file ${DEFAULT_BUILD_CONFIG} or given file to parse for supported
distros for given config name

Note: config file needs to to be a json file and must be in sync with workspace
structure and settings
END
}

function parse_machines_from_file () {
	local configfile="$(readlink --canonicalize-existing "${1}")"
	local config="${2}"

	if [ -f "${configfile}" ]; then
		local machines=$(get_machines_for_config "${configfile}" "${config}")

		for m in ${machines}; do
			echo "${m}"
		done
	else
		error_out "config file ${1} not existing"
	fi
}

function parse_machines_from_dir () {
	local machinepath="$(readlink --canonicalize-existing ${1}/conf/machine)"

	if [ -d "${machinepath}" ]; then
		# filter out distros from the layer
		local machines=$(ls ${machinepath}/*.conf | \
			sed s/\.conf//g | xargs -n1 basename)

		for m in ${machines}; do
			echo "${m}"
		done
	fi
}

main() {
	local machine_dir=""
	local config_file=""
	local config_name=""
	local pos_params=""

	if [ "${#}" -gt "2" ]; then
		usage
		return 1
	fi

	while (( "$#" )); do
		case ${1} in
		-h|--help )
			usage
			return 0
			;;
		--config=* )
			config_name=${1#*=}
			shift
			;;
		--file=* )
			config_file=${1#*=}
			shift
			;;
		--file )
			config_file="${DEFAULT_BUILD_CONFIG}"
			shift
			;;
		--dir=* )
			machine_dir=${1#*=}
			shift
			;;
		--dir )
			machine_dir="${DEFAULT_LAYER_DIR}"
			shift
			;;
		--*=|-*) # unsupported flags
			error_out "Error: Unsupported flag $1"
			exit 1
			;;
		*) # preserve positional arguments
			pos_params="$pos_params $1"
			shift
			;;
		esac
	done

	if [ -n "${pos_params}" ]; then
		error_out "unhandled parameters $pos_params"
	fi


	if [ -n "${config_file}" ] && [ -n "${machine_dir}" ]; then
		usage
		exit 1
	fi

	if [ -z ${config_file} ] && [ -z ${machine_dir} ]; then
		usage
		exit 1
	fi

	if [ -n "${config_file}" ] && [ -z ${config_name} ]; then
		usage
		exit 1
	fi

	if [ -n "${config_file}" ]; then
		parse_machines_from_file "${config_file}" ${config_name}
		return 0
	fi

	if [ -n "${machine_dir}" ]; then
		parse_machines_from_dir "${machine_dir}"
		return 0
	fi

	usage

	return 1
}

main "$@"
