#!/bin/bash
#
# File:        utils
# Copyright (C) 2021 TQ-Systems GmbH
# @author Markus Niebel <Markus.Niebel@tq-group.com>
# @author Martin Schmiedel <Martin.Schmiedel@tq-group.com>
#
# Description: shared utils for buildscripts
#
# License:     GPLv2
#
###############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
###############################################################################

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
__print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			[ "${DEBUG}" = "on" ] && echo "${SCRIPT} [DEBUG]: ${msg}"
			;;
	esac
}

debug () {
	__print dbg "$@"
}

info () {
	__print info "$@"
}

error () {
	__print err "$@"
}

error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local infile=${3}

	debug "trying assign/replace $1 $2:"
	debug "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}"

	sed -i "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}" ${infile}

	debug "$(cat ${infile})"
}

####
# func:   get_md5sum
# brief:  calculate md5sum for all files directory 
# param:  $1 - directory
# return: file containing md5sum of files
####
get_md5sum () {
	local mypwd=$(pwd)
	local directory=${1}

	if [ -d ${directory} ]; then
		cd ${directory}
		local files=$(find . -maxdepth 1 -type f)

		for file in ${files}; do
			md5sum ${file}
			if [ "$?" -ne "0" ]; then
				err "md5sum for ${file}"
			fi
		done
	fi
	cd ${mypwd}
}

####
# func:   do_link_auto_conf
# brief:  update the auto.conflink based on template
#         link conf/auto.conf to conf/auto.conf.tmpl
# param:  $1 - template (ci/mirror/normal)
# return: ---
####
do_link_auto_conf () {
	local PWD=$(pwd)
	local templ=${1}

	rm -rf ${PWD}/conf/auto.conf
	ln -s ${PWD}/conf/auto.conf.${templ} ${PWD}/conf/auto.conf
	! [ -e ${PWD}/conf/auto.conf ] && error_out "missing auto.conf"
}

####
# func:   get_images
# brief:  return image based on distro
# param:  $1 - distro
# return: image
####
get_images () {
	local distro=${1}
	local filter="-nxp\|-ti\|-ls"
	local choosen_images="tq-image-generic"

	case $(echo ${distro} | sed -e "s/${filter}//g" ) in
		spaetzle )
			choosen_images="tq-image-small"
			;;
		dumpling-rt )
			choosen_images="tq-image-small"
			;;
		dumpling-wayland )
			choosen_images="tq-image-weston"
			;;
		dumpling )
			choosen_images="tq-image-generic"
			;;
		* )
			error "no image for distro ${distro}"
			exit 1
			;;
	esac

	if [ -z "${LOCAL}" ] || [ -z "${IMAGE_LIST}" ]
	then
		echo "${choosen_images}"
	else
		echo "${IMAGE_LIST}"
	fi
}

####
# func:   get_machines
# brief:  return buildable machines for config
# param:  $1 - config (imx/ls/ti/minimal)
# return: list of machines
####
get_machines () {
	local config=${1}
	local all_machines=$("${SCRIPTPATH}"/ls-machines)
	local ti_machines=$("${SCRIPTPATH}"/ls-machines | grep 'tqma335\|tqma57')
	local ls_machines=$("${SCRIPTPATH}"/ls-machines | grep 'tqml[s,x]')
	local imx_machines=$("${SCRIPTPATH}"/ls-machines | grep 'tqma[6,7]')
	local minimal_exclude="${ls_machines}"
	local ls_exclude=$(echo "${ti_machines} ${imx_machines}")
	local imx_exclude=$(echo "${ls_machines} ${ti_machines}")
	local ti_exclude=$(echo "${imx_machines} ${ls_machines}")
	local choosen_machines=${all_machines}

	case ${config} in
	"imx" )
		for excl in ${imx_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"ls" )
		for excl in ${ls_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"minimal" )
		for excl in ${minimal_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"ti" )
		for excl in ${ti_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	* )
		exit 1
		;;
	esac

	if [ -z "${LOCAL}" ] || [ -z "${MACHINE_LIST}" ]
	then
		echo "${choosen_machines}"
	else
		echo "${MACHINE_LIST}"
	fi
}

####
# func:   get_distros
# brief:  return list of distros from meta-dumpling
# return: list of distros
####
get_distros () {
	local distro_path="sources/meta-dumpling/conf/distro"
	local distros=$(cd ${distro_path} && find ./*.conf | sed -E "s/\.\/(.*)\.(.*)/\1/")

	if [ -z "${LOCAL}" ] || [ -z "${DISTRO_LIST}" ]
	then
		echo "${distros}"
	else
		echo "${DISTRO_LIST}"
	fi
}
