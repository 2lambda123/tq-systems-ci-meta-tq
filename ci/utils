#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2021-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Martin Schmiedel
#
# Description: shared utils for buildscripts
#
###############################################################################

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
__print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			if [ "${DEBUG}" = "on" ]
			then
				echo "${SCRIPT} [DEBUG]: ${msg}"
			fi
			;;
	esac
}

debug () {
	__print dbg "$@"
}

info () {
	__print info "$@"
}

error () {
	__print err "$@"
}

error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

##############
# replace assigned variable or assign variable if not already assigned
# $1        - variable to assign
# $2        - value for variable
# $3        - assignment operator
# $4        - file to edit
#
# use sed to find and replace existing assignment or add assignment
# First the assignment of local vars ensures proper formatting so that it is
# possible to use also variables as expressions, so the finally alos assignments
# of this types could be made in the file to edit:
# "${VARNAME} = ${VALUE}"
# The somewhat complex sed expression uses hold and pattern space
# (see sed manual) to either replace a line starting with '${var} ' with
# '${var} ${op} ${val}' (first expression) or add such a line if no line starting
# with '${var} ' could be found in the file
##############
assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local op=${3////\\/}
	local infile=${4}

	sed --in-place "/^${var} /{h;s/.*/${var} ${op} \"${val}\"/};\${x;/^$/{s//${var} ${op} \"${val}\"/;H};x}" ${infile}
}

####
# func:   get_md5sum
# brief:  calculate md5sum for all files directory
# param:  $1 - directory
# return: file containing md5sum of files
####
get_md5sum () {
	local mypwd=$(pwd)
	local directory=${1}

	if [ -d ${directory} ]; then
		cd ${directory}
		local files=$(find . -maxdepth 1 -type f)

		for file in ${files}; do
			if ! md5sum ${file}; then
				err "md5sum for ${file}"
			fi
		done
	fi
	cd ${mypwd}
}

####
# func:   do_create_auto_conf
# brief:  recreate the auto.conf based on template files
#         copy conf/auto.conf.sample to to conf/auto.conf and
#         optionally append conf/auto.conf.${1} to conf/auto.conf
# param:  $1 - [optional] template (ci/mirror)
# return: ---
####
do_create_auto_conf () {
	local PWD=$(pwd)
	local templ=${1}

	rm -f ${PWD}/conf/auto.conf
	cp ${PWD}/conf/auto.conf.sample ${PWD}/conf/auto.conf
	if ! [ -e ${PWD}/conf/auto.conf ]; then
		error_out "missing auto.conf"
	fi
	if ! [ -z ${templ} ]; then
		if [ -e ${PWD}/conf/auto.conf.${templ} ]; then
			cat ${PWD}/conf/auto.conf.${templ} >> ${PWD}/conf/auto.conf
		fi
	fi
}

readonly DEFAULT_BUILD_CONFIG="build-config.json"

####
# func:   lookup_values_for_key
# brief:  return list of values extrcated from json file
# param:  $1 - file
# param:  $2 - filter
# param:  $3 - key name
# param:  $4 - key value
# return list of items
####
lookup_values_for_key () {
	local fname=${1}
	local fexpr=${2}
	local key=${3}
	local val=${4}
	local aname=${5}

	local query="${fexpr} | select(.${key}==\"${val}\") | .${aname} | length"
	#debug "lookup_values_for_key: constructed $query"
	local count=$(jq "${query}" "${fname}")
	#debug "lookup_values_for_key count=$count"
	local list
	
	for n in $(seq 0 $(expr ${count} - 1)); do
		query="${fexpr} | select(.${key}==\"${val}\") | .${aname}[$n]"
		# debug "lookup_values_for_key: constructed ${query}"
		list="${list} $(jq -r "${query}" "${fname}")"
	done

	echo ${list}
}

lookup_single_value_for_key () {
	local fname=${1}
	local fexpr=${2}
	local key=${3}
	local val=${4}
	local aname=${5}

	query="${fexpr} | select(.${key}==\"${val}\").${aname}"
	value="$(jq -r "${query}" "${fname}")"

	echo ${value}
}

####
# func:   get_images_for_distro
# brief:  return list of images buildable by given distro
# param:  $1 - file
# param:  $2 - distro
# return list of images
####
get_images_for_distro () {
	local fname=${1}
	local distro=${2}

	lookup_values_for_key "${fname}" ".distros[]" "name" "${distro}" "images"
}

####
# func:   get_distros_for_config
# brief:  return list of distros buildable by given config
# param:  $1 - file
# param:  $2 - config
# return list of distros
####
get_distros_for_config () {
	local fname=${1}
	local config=${2}

	lookup_values_for_key "${fname}" ".configs[]" "name" "${config}" "distros"
}

####
# func:   get_groups_for_config
# brief:  return list of machine groups for given config
# param:  $1 - file
# param:  $2 - config
# return list of machine groups
####
get_groups_for_config () {
	local fname=${1}
	local config=${2}
	local mgroups=$(lookup_values_for_key "${fname}" ".configs[]" "name" "${config}" "groups")

	echo ${mgroups}
}

####
# func:   get_machine_pattern_for_group
# brief:  return list of machine patterns for given machine group
# param:  $1 - file
# param:  $2 - group
# return list of machine groups
####
get_machine_pattern_for_group () {
	local fname=${1}
	local group=${2}

	lookup_single_value_for_key "${fname}" ".machine_groups[]" "name" "${group}" "pattern"
}

get_machine_pattern_for_config () {
	local fname=${1}
	local config=${2}
	local mgroups="$(get_groups_for_config "${fname}" ${config})"
	local mpattern=""

	for mg in ${mgroups}; do
		mpattern="${mpattern} $(get_machine_pattern_for_group ${fname} ${mg})"
	done

	echo ${mpattern}
}

get_machines_in_workspace () {
	local fname=${1}
	local folder=$(jq -r ".[\"yocto-machine-folder\"]" "${fname}")
	local machines="$(ls -1 $(pwd)/${folder}/*.conf | sed s/\.conf//g | xargs -n1 basename)"

	# one per line
	for m in ${machines}; do
		echo ${m}
	done
}

get_machines_for_pattern () {
	local fname=${1}
	local pattern=${2}
	local allmachines=$(get_machines_in_workspace "${fname}")
	local machines=""
	local count="0";

	machines=$(echo "${allmachines}" | grep "${pattern}" )
	
	echo ${machines}
}

get_machines_for_config () {
	local fname=${1}
	local config=${2}
	local mpattern=$(get_machine_pattern_for_config ${fname} ${config})
	local machines=""

	for mp in ${mpattern}; do
		machines="${machines} $(get_machines_for_pattern ${fname} ${mp})"
	done

	echo ${machines}
}


####
# func:   get_configs_in_workspace
# brief:  return list of configs from json file for workspace
# param:  $1 - file
# return list configurations in workspace
####
get_configs_in_workspace () {
	local fname=${1}
	local configs=$(jq -r ".configs[].name" ${fname})

	echo ${configs}
}

####
# func:   get_images
# brief:  return image based on distro
# param:  $1 - distro
# return: image
####
get_images () {
	local distro=${1}
	local filter="-nxp\|-ti\|-ls"
	local choosen_images="tq-image-generic"

	case $(echo ${distro} | sed -e "s/${filter}//g" ) in
		spaetzle )
			choosen_images="tq-image-small-debug"
			;;
		dumpling-rt )
			choosen_images="tq-image-small-debug"
			;;
		dumpling-wayland )
			choosen_images="tq-image-weston-debug"
			;;
		dumpling )
			choosen_images="tq-image-generic-debug"
			;;
		* )
			error "no image for distro ${distro}"
			exit 1
			;;
	esac

	if [ -z "${LOCAL}" ] || [ -z "${IMAGE_LIST}" ]
	then
		echo "${choosen_images}"
	else
		echo "${IMAGE_LIST}"
	fi
}

####
# func:   valid_config
# brief:  check if config is in list of supported configs
# param:  $1 - config
####
valid_config() {
	local config=${1}
	local supported_configs="$(${SCRIPTPATH}/ls-configs) --file"

	echo ${supported_configs} | grep -wq "${config}"
}

####
# func:   get_machines
# brief:  return buildable machines for config
# param:  $1 - config (imx/ls/ti/mainline)
# return: list of machines
####
get_machines () {
	local config=${1}
	local all_machines=$("${SCRIPTPATH}"/ls-machines)
	local ti_machines=$(echo "${all_machines}" | grep 'tqma335\|tqma57\|tqma62\|tqma64\|tqma65')
	local ls_machines=$(echo "${all_machines}" | grep 'tqml[s,x]\|tqmt')
	local imx_machines=$(echo "${all_machines}" | grep 'tqma[6,7,8][^0-9]\|tqma93')
	local imx6ul_machines=$(echo "${all_machines}" | grep 'tqma6ul')
	local imx7_machines=$(echo "${all_machines}" | grep 'tqma7')
	local imx8qm_machines=$(echo "${all_machines}" | grep 'tqma8qm')
	local imx8x_machines=$(echo "${all_machines}" | grep 'tqma8x')
	local imx8m_machines=$(echo "${all_machines}" | grep 'tqma8m')
	local imx8_machines=$(echo "${imx8m_machines} ${imx8x_machines} ${imx8qm_machines}")
	local imx9_machines=$(echo "${all_machines}" | grep 'tqma93[^0-9]')
	local mc_machines=$(echo "${all_machines}" | grep 'k3r5')
	local ml_exclude=$(echo "${ls_machines} ${imx8x_machines} ${imx8qm_machines} ${imx9_machines} ${ti_machines} ${mc_machines}")
	local ls_exclude=$(echo "${ti_machines} ${imx_machines} ${mc_machines}")
	# we do not maintain an imx-Kernel for TQMa6UL[L]x[L] and TQMa7x at the moment.
	local imx_exclude=$(echo "${ls_machines} ${ti_machines} ${mc_machines} ${imx6ul_machines} ${imx7_machines}")
	local ti_exclude=$(echo "${imx_machines} ${ls_machines} ${mc_machines}")
	local choosen_machines=${all_machines}

	if ! valid_config ${config}; then
		error "invalid config: ${config}"
		return -1
	fi

	case ${config} in
	"imx" )
		for excl in ${imx_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"ls" )
		for excl in ${ls_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"mainline" )
		for excl in ${ml_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	"ti" )
		for excl in ${ti_exclude}; do
			choosen_machines=$(echo ${choosen_machines} | sed -e "s/ *${excl} */ /")
		done
		;;
	* )
		exit 1
		;;
	esac

	if [ -z "${LOCAL}" ] || [ -z "${MACHINE_LIST}" ]
	then
		echo "${choosen_machines}"
	else
		echo "${MACHINE_LIST}"
	fi
}

####
# func:   get_distros
# brief:  return buildable machines for config
# param:  $1 - config (imx/ls/ti/mainline)
# return: list of supported distros for the given config
####
get_distros () {
	local all_distros=$("${SCRIPTPATH}/ls-distros" "meta-tq/meta-dumpling")
	local chosen_distros=${all_distros}
	local config=${1}

	if ! valid_config ${config}; then
		error "invalid config: ${config}"
		return -1
	fi

	case ${config} in
	"imx" )
		choosen_distros="spaetzle-nxp dumpling-wayland-nxp"
		;;
	"ls" )
		choosen_distros="spaetzle-ls dumpling-ls"
		;;
	"mainline" )
		choosen_distros="spaetzle dumpling-wayland"
		;;
	"ti" )
		choosen_distros="spaetzle-ti dumpling-wayland-ti"
		;;
	* )
		exit 1
		;;
	esac

	if [ -z "${LOCAL}" ] || [ -z "${DISTRO_LIST}" ]
	then
		echo "${choosen_distros}"
	else
		echo "${DISTRO_LIST}"
	fi
}
