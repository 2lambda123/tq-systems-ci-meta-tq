#!/bin/bash
#
# File:        build-all
# Copyright (C) 2017 TQ Systems GmbH
# @author Markus Niebel <Markus.Niebel@tq-group.com>
#
# Description: build all machines in a layer with a given config
#
# License:     GPLv2
#
###############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
###############################################################################

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname $(readlink -f "${0}"))
readonly SCRIPT="$(basename ${0})"

usage() {
	echo -e "\nUsage: ${SCRIPTNAME} <build-dir> <template> [<mode>] \n \
	<build-dir>: specifies the build directory location (required) \n \
	<template>: template bblayers.conf to use \n \
	mode=normal or not given: do normal build \n
	mode=mirror: if given, download only and provide mirror tarballs \n
	mode=ci: if given, use only mirror tarballs to build"
}

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
__print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo -e "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo -e "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			[ "${DEBUG}" = "on" ] && echo -e "${SCRIPT} [DEBUG]: ${msg}"
			;;
	esac
}

debug () {
	__print dbg "$@"
}

info () {
	__print info "$@"
}

error () {
	__print err "$@"
}

error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local infile=${3}

	debug "trying assign/replace $1 $2:"
	debug "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}"

	sed -i "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}" ${infile}

	debug "$(cat ${infile})"
}

assignplus() {
	local var=${1}
	local val=${2}
	local infile=${3}

	debug "trying assignplus $1 $2"

	grep -q "^${var} += \"${val}\"" "${infile}" || echo "${var} += \"${val}\"" | tee -a "${infile}"

	debug "$(cat ${infile})"
}

assignopt_or_replace() {
	local var=${1}
	local val=${2}
	local infile=${3}

	debug "trying assignopt/replace $1 $2"

	sed -i "/^${var} ?=/{h;s/?=.*/?= \"${val}\"/};\${x;/^$/{s//${var} ?= \"${val}\"/;H};x}" ${infile}

	debug "$(cat ${infile})"
}

function get_md5sum () {
	MYPWD=$(pwd)
	DIRECTORY=${1}

	if [ -d ${DIRECTORY} ]; then
		cd ${DIRECTORY}
		local FILES=$(find . -maxdepth 1 -type f)

		for file in ${FILES}; do
			md5sum ${file}
			if [ "$?" -ne "0" ]; then
				err "md5sum for ${file}"
			fi
		done
	fi
	cd ${MYPWD}
}

main () {
	# this disables network check
	export CONNECTIVITY_CHECK_URIS=" "

	local BUILD_DIR=${1}
	local DEPLOYDIR=$(readlink -f ./${BUILD_DIR})/deployment
	local LAYER="meta-tq"
	local ALL_TARGETS="unknown"
	local CONFIG=${2}
	local IMAGES="core-image-minimal"
	local MINIMAL_EXCLUDE="tqmls102xa-mbls102xa"
	local MFGTOOL_EXCLUDE="tqma6q-nav tqmls102xa-mbls102xa"
	local GUI_EXCLUDE="tqmls102xa-mbls102xa"
	local MODE="normal"

	if ! [ -z "${3}" ]
	then
		if [ "${3}" == "mirror" ] || [ "${3}" == "ci" ] || [ "${3}" == "normal" ]
		then
			MODE=${3}
		else
			usage
			exit 1
		fi
	fi

	echo $1 $2 $3 $MODE

	# filter out machines from the ${LAYER}
	ALL_TARGETS=$(ls sources/${LAYER}/conf/machine/*.conf | \
		sed s/\.conf//g | xargs -n1 basename)
	# TODO: find real boards to be build ...
	ALL_TARGETS="imx8qxpa0mek tqma8qx-mba8qx tqma8qxs-mb-smarc-2"
	local MINIMAL_TARGETS=${ALL_TARGETS}
	local GUI_TARGETS=${ALL_TARGETS}
	local MFGTOOL_TARGETS=${ALL_TARGETS}

	case ${CONFIG} in
	"gui" )
		IMAGES="fsl-image-multimedia-full"
		# tqma6q-nav and tqmls102xa-mbls102xa have no support for mfgtool
		for excl in ${GUI_EXCLUDE}; do
			GUI_TARGETS=$(echo ${GUI_TARGETS} | sed -e "s/ *$excl */ /")
		done
		export MACHINE=$(echo $GUI_TARGETS | awk '{ print $1 }')
		ALL_TARGETS=${GUI_TARGETS}
		export EULA="y"
		;;
	"minimal" )
		IMAGES="core-image-minimal"
		for excl in ${MINIMAL_EXCLUDE}; do
			MINIMAL_TARGETS=$(echo ${MINIMAL_TARGETS} | sed -e "s/ *$excl */ /")
		done
		export MACHINE=$(echo $MINIMAL_TARGETS | awk '{ print $1 }')
		ALL_TARGETS=${MINIMAL_TARGETS}
		;;
	"mfgtool" )
		IMAGES="fsl-image-mfgtool-initramfs"
		# tqma6q-nav and tqmls102xa-mbls102xa have no support for mfgtool
		for excl in ${MFGTOOL_EXCLUDE}; do
			MFGTOOL_TARGETS=$(echo ${MFGTOOL_TARGETS} | sed -e "s/ *$excl */ /")
		done
		export MACHINE=$(echo $MFGTOOL_TARGETS | awk '{ print $1 }')
		ALL_TARGETS=${MFGTOOL_TARGETS}
		export EULA="y"
		;;
	* )
		usage
		exit 1
		;;
	esac

	# filter out double entries in case we build multiple images per config
	ALL_TARGETS=$(echo ${ALL_TARGETS} | tr ' ' '\n' | sort -u)

	# source the real setup workhorse.
	export MACHINE=$(echo ${ALL_TARGETS} | awk '{ print $1 }')
	# TODO: need to call nxp setup script ...
	#. ./setup-environment ${BUILD_DIR} ${CONFIG}
	. ./fsl-setup-release.sh -b ${BUILD_DIR} -e wayland
	[ "$?" -ne "0" ] && echo "environment setup failed" && exit 1

	if ! [ -f ./version.info ]; then
		${SCRIPTPATH}/poky-version-check.sh mkinfo
		[ "$?" -ne "0" ] && error_out "failed to create version.info"
	else
		${SCRIPTPATH}/poky-version-check.sh check
		[ "$?" -ne "0" ] && error_out "not clean and version changed"
	fi

	# modify local conf as needed before executing bitbake
	if [ "${MODE}" == "mirror" ]; then
		echo "build mirror"
		# poky has per default precompiled native / host packages,
		# these have malformed local URIs that prevent usage.
		assign_or_replace INHERIT_remove uninative conf/local.conf

		# we will build a local mirror for usage with buildserver ...
		# so we need to generate tarballs for git repos etc. ...
		assign_or_replace BB_GENERATE_MIRROR_TARBALLS 1 conf/local.conf

		# force to have a separate DL_DIR to make sure we download all stuff
		# needed but not available yet
		# beware: needed quoting for shall and sed!
		assign_or_replace DL_DIR "\\\${TOPDIR}/downloads" conf/local.conf

		echo "clean local dirs in $(pwd) ..."
		rm -rf cache tmp sstate-cache
		# get DL_DIR from local.conf to cleanup packages generated from git ...
		SETTER=$(bitbake -e | grep ^"DL_DIR=")
		echo "$SETTER"
		export ${SETTER}
		# if there is a .done file and / or a git2_*.tar.gz it seems the
		# fetcher does not rerun git to update the repo
		echo "clean git2 tarballs from ${DL_DIR} ..."
		rm -f ${DL_DIR}/git2_*.tar.gz
		rm -f ${DL_DIR}/git2_*.tar.gz.done
		ls -1 ${DL_DIR}/git2_*

		for img in ${IMAGES}; do
			case ${img} in
			core-image-minimal )
				TARGETS=${MINIMAL_TARGETS}
				;;
			fsl-image-multimedia-full )
				TARGETS=${GUI_TARGETS}
				;;
			fsl-image-mfgtool-initramfs )
				TARGETS=${MFGTOOL_TARGETS}
				;;
			* )
				;;
			esac

			# now force bitbake to do a -c fetchall for the image to generate
			for t in $TARGETS; do
				export MACHINE=${t}
				echo "baking: ${MACHINE} ${img} with -c fetchall"
				bitbake -c fetchall ${img}
				[ "$?" -ne "0" ] && error_out "fetching ($img for $t) failed"
			done
		done

		URL=$(bitbake -e | grep ^"SOURCE_MIRROR_URL=")
		export ${URL}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL%\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#file://*}

		DL_DIR=${DL_DIR#\"*}
		DL_DIR=${DL_DIR%\"*}

		echo "copy tarballs from ${DL_DIR} to ${SOURCE_MIRROR_URL} ..."
		FILES=$(find ${DL_DIR} -maxdepth 1 -type f -not -name "*.done")
		echo "copy ${FILES}"
		for f in ${FILES}; do
			cp ${f} ${SOURCE_MIRROR_URL}
		done
	else
		echo "build images"

		if [ "${MODE}" == "ci" ]; then
			if [ -d "${DEPLOYDIR}" ]; then
				rm -rf "${DEPLOYDIR}"
			fi

			# poky has per default precompiled uninative package,
			# this has a malformed local URI that prevent usage.
			assign_or_replace INHERIT_remove uninative conf/local.conf

			# need to set SOURCE_MIRROR_URL in a site global config on the build server
			# echo "SOURCE_MIRROR_URL ?= \"file:///blabla
			# used to force to use and generate a mirror config from $SOURCE_MIRROR_URL
			assignplus INHERIT own-mirrors conf/local.conf

			# force to fetch from premirrors only
			assign_or_replace BB_FETCH_PREMIRRORONLY 1 conf/local.conf

			# force to switch off any network check
			assign_or_replace BB_NO_NETWORK 1 conf/local.conf

			# premirrors have to be configured per site ...

			# cleanup: rm_work for package work dir, RM_OLD_IMAGES for last build images
			assignplus INHERIT rm_work conf/local.conf
			assign_or_replace RM_OLD_IMAGE 1 conf/local.conf

			assignplus INHERIT archiver conf/local.conf
			assignopt_or_replace COPYLEFT_LICENSE_EXCLUDE "CLOSED Proprietary" conf/local.conf

			## echo "COPYLEFT_LICENSE_INCLUDE ?= \"*\"" | tee -a  conf/local.conf
			assignopt_or_replace ARCHIVER_MODE[src] original conf/local.conf

			## echo "COPYLEFT_RECIPE_TYPES ?= \"\${COPYLEFT_AVAILABLE_RECIPE_TYPES}\"" | tee -a  conf/local.conf
			## echo "COPYLEFT_RECIPE_TYPE ?= \"\${COPYLEFT_AVAILABLE_RECIPE_TYPES}\"" | tee -a  conf/local.conf
		fi

		if ! [ -z ${SSTATE_DIR} ]; then
			# add SSTATE dir outside of builddir, optimize global builds
			assign_or_replace SSTATE_DIR ${SSTATE_DIR} conf/local.conf
		else
			echo "env SSTATE_DIR empty, add it to your site.conf"
		fi
		if ! [ -z ${DL_DIR} ]; then
			# add DL_DIR dir outside of builddir, optimize global builds
			assign_or_replace DL_DIR ${DL_DIR} conf/local.conf

		else
			echo "DL_DIR empty"
		fi

		for img in ${IMAGES}; do
			case ${img} in
			core-image-minimal )
				TARGETS=${MINIMAL_TARGETS}
				;;
			fsl-image-multimedia-full )
				TARGETS=${GUI_TARGETS}
				;;
			fsl-image-mfgtool-initramfs )
				TARGETS=${MFGTOOL_TARGETS}
				;;
			* )
				;;
			esac

			# now force bitbake to generate images for all targets ...
			for t in ${TARGETS}; do
				local err;
				# overwrite MACHINE
				export MACHINE=${t}
				echo "baking ${MACHINE} ${img} ..."
				# create image for $MACHINE
				bitbake ${img}
				err=${?}
				# HACKHACKHACK: fsl-image-mfgtool-initramfs needs linux-mfgtool
				# this recipe will fail with a diagnostic error, even when
				# building for mx6sabresd
				# workaround: check if image exists
				if [ "${img}" == "fsl-image-mfgtool-initramfs" ]; then
					local THELINK="./tmp/deploy/images/${MACHINE}/${img}-${MACHINE}.cpio.gz.u-boot"
					if [ -L ${THELINK} ] && [ -e ${THELINK} ]; then
						echo "ok"
					else
						error_out "bitbake ${img} for ${MACHINE} failed, no ${THELINK}"
					fi
				else
					[ "${err}" -ne "0" ] && error_out "bitbake ${img} for ${MACHINE} failed"
				fi
			done
		done

		if [ "${MODE}" == "ci" ]; then
			mkdir -p ${DEPLOYDIR}
			local ARTIFACTSDIR=$(pwd)/tmp/deploy/images
			local STAMP=$(${SCRIPTPATH}/git-revision-name.sh)
			# note: this depends on a selected distro
			local VERSION=$(bitbake -e | grep ^"DISTRO_VERSION=")
			export ${VERSION}
			DISTRO_VERSION=${DISTRO_VERSION#\"*}
			DISTRO_VERSION=${DISTRO_VERSION%\"*}
			local CODENAME=$(bitbake -e | grep ^"DISTRO_CODENAME=")
			export ${CODENAME}
			DISTRO_CODENAME=${DISTRO_CODENAME#\"*}
			DISTRO_CODENAME=${DISTRO_CODENAME%\"*}
			TARGETS=${MINIMAL_TARGETS}

			for t in ${ALL_TARGETS}; do
				MACHINE=${t}
				echo "archiving ${MACHINE} ..."
				# create a file containing md5sum of files
				get_md5sum ${ARTIFACTSDIR}/${MACHINE} > ${DEPLOYDIR}/${MACHINE}-${CONFIG}-${DISTRO_CODENAME}-${DISTRO_VERSION}-${STAMP}.md5sum
				cp ${DEPLOYDIR}/${MACHINE}-${CONFIG}-${DISTRO_CODENAME}-${DISTRO_VERSION}-${STAMP}.md5sum ${ARTIFACTSDIR}/${MACHINE}
				# create a file containing the version we are build from
				git log -1 > ${ARTIFACTSDIR}/${MACHINE}/${STAMP}.info;
				# create image archive for $MACHINE
				tar -cvzf ${DEPLOYDIR}/${MACHINE}-${CONFIG}-${DISTRO_CODENAME}-${DISTRO_VERSION}.${STAMP}.BIN.tar.gz -C ${ARTIFACTSDIR} ${MACHINE}
				[ "$?" -ne "0" ] && error_out "archiving for ${MACHINE} failed"
			done
			tar -cvzf ${DEPLOYDIR}/${CONFIG}-${DISTRO_CODENAME}-${DISTRO_VERSION}.${STAMP}.LIC.tar.gz -C $(pwd)/tmp/deploy licenses
			tar -cvzf ${DEPLOYDIR}/${CONFIG}-${DISTRO_CODENAME}-${DISTRO_VERSION}.${STAMP}.SRC.tar.gz -C $(pwd)/tmp/deploy sources
		fi
	fi

	return 0
}

main ${@}

