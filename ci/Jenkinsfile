/**
 * Copyright (C) 2017 - 2022 TQ-Systems GmbH
 * @author Markus Niebel <Markus.Niebel@tq-group.com>
 * @author Martin Schmiedel <Martin.Schmiedel@tq-group.com>
 * Jenkinsfile for TQ-Systems Yocto-BSPs using declarative pipeline
 * License:     GPLv2
 *
 */

import java.text.*
import groovy.time.*

/**********************************************************************/
/*******************         Functions         ************************/
/**********************************************************************/

/**********************************************************************/
/* Special submodule handling                                         */
/* we need to be able to exchange the submodule setup                 */
/* therefore                                                          */
/* - add / remove / update submodule url                              */
/* - fetch all repos and clean no longer existing refs                */
/* - update default branch to the first branch of origin              */
/* - do repo maintenance, remove all dangling commits                 */
/* - force a clean checkout with existing ref to make sure following  */
/*   cleanup of submodule workdir and                                 */
/*   'git submodule update --init' runs smoothly                      */
/**********************************************************************/
def checkoutMetaLayers(directoryName) {
    dir("${directoryName}") {
        sshagent(['jenkins-master-key']) {
            sh """
            git submodule sync
            git submodule foreach --recursive 'git fetch --force --prune --prune-tags --tags origin'
            git submodule foreach --recursive 'git remote set-head origin "\$(git branch --remotes --list "origin/*" | tail -1 | cut -d/ -f2-)"'
            git submodule foreach --recursive 'git reset --hard origin/HEAD'
            git submodule foreach --recursive 'git gc --prune=all'
            git submodule foreach --recursive 'git clean -fdx'
            git submodule update --init
            git clean -fdx sources/templates
            git clean -fx"""
        }
    }
}

/**********************************************************************/
/* create subdirectorys and add symbolic links for sources            */
/* all git releated files are ignored                 */
/**********************************************************************/
def prepareWorkspace(directoryName) {
    sshagent(['jenkins-master-key']) {
        def command = $/mkdir --parents ${directoryName}; find $(pwd) -maxdepth 1 \( -not -wholename '*/\.git/*' -and -not -name '.git*' \) -exec ln -vs "{}" ${directoryName}/ ';'/$
        sh(returnStdout: true, script: command).trim()
    }
    echo "create shared DL_DIR ${env.WORKSPACE}/${env.DL_DIR} ..."
    sh "mkdir -p ${env.WORKSPACE}/${env.DL_DIR}"
}

/**********************************************************************/
/* create missing mirror packages using fill_mirror script.           */
/* use separate build directory since other config options are used   */
/* The given directory name must match the configuration name         */
/* clean mirror build dir to prevent old downloads are moved into     */
/* shared dl dir. ( clean up after finished )                         */
/**********************************************************************/
def mirrorConfiguration(directoryName) {
    dir("${directoryName}") {
        sshagent(['jenkins-master-key']) {
            echo "create mirror packages for all machines of config ${directoryName} ..."
            sh "./ci/fill_mirror ${env.BUILD_DIR}-mirror \$(basename \$(pwd))"
            sh "find . -maxdepth 2 -wholename '*-mirror*downloads' | xargs -n1 -I% rsync -rl --checksum --ignore-existing --exclude 'git2*' %/ ${env.WORKSPACE}/${env.DL_DIR}/"
            sh "find . -type d -name '*mirror*' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
            sh "find . -type d -name '*mirror*' -delete"
        }
    }
}

/**********************************************************************/
/* build images for all machines using build_all script.              */
/* The given directory name must match the configuration name         */
/* which is needed as parameter for the build_all script              */
/* Note:                                                              */
/* all configurations use a shared dl dir                             */
/* the build node should have the path to SSTATE_DIR in the site.conf */
/**********************************************************************/
def buildConfiguration(directoryName) {
    dir("${directoryName}") {
        echo "build all machines for config ${directoryName} ..."
        sh "export DL_DIR=${env.WORKSPACE}/${env.DL_DIR} && ./ci/build_all ${env.BUILD_DIR} \$(basename \$(pwd))"
    }
}

/**********************************************************************/
/* Before the build starts we have to cleanup the Buildspace          */
/* - delete directories depending on BuildCause                       */
/* - delete complete build dir for manual triggered builds (RELEASE)  */
/* - delete only the tmp dir for Timer or Merge Triggered builds      */
/* - for user and timer builds delete the download dir                */
/**********************************************************************/

def cleanupBuild() {
    def causes = currentBuild.getBuildCauses()

    echo "create empty dir, could be used by rsync for deleting folders"
    sh "mkdir --parents ${env.WORKSPACE}/empty"    
    println causes.toString()

    for(cause in causes) {
        def reason = cause.toString()
        cause = null
        if (reason.contains("TimerTriggerCause")) {
            println "This job was caused by Timer, remove tmp ... (NIGHTLY)"
            sh "find . -maxdepth 4 -type d -name 'tmp' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
            sh "find . -maxdepth 4 -type d -name 'tmp' -delete"
        } else if (reason.contains("UserIdCause")) {
            println "This job was caused by user, remove build directory ... (RELEASE)"
            sh "find . -maxdepth 3 -type d -name '${env.BUILD_DIR}_*' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
            sh "find . -maxdepth 3 -type d -name '${env.BUILD_DIR}_*' -delete"
        } else if (reason.contains("GitLabWebHookCause")) {
            println "This job was caused by GitLab remove tmp ..."
            sh "find . -maxdepth 4 -type d -name 'tmp' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
            sh "find . -maxdepth 4 -type d -name 'tmp' -delete"
        } else {
            println "build cause : " + reason
        }

        if (reason.contains("TimerTriggerCause") || reason.contains("UserIdCause")) {
            println "clear ${env.DL_DIR} ..."
            sh "find . -type d -name '${env.DL_DIR}'| xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
            sh "find . -type d -name '${env.DL_DIR}' -delete"
        }
    }

    echo "Remove links from last build ..."
    sh "find . -maxdepth 3 -type l -wholename '*CONFIGS*' -delete"

    echo "Remove all deploy directorys ..."
    sh "find . -type d -name 'deploy' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
    sh "find . -type d -name 'deploy' -delete"
    sh "find . -type d -name 'deployment' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
    sh "find . -type d -name 'deployment' -delete"

    echo "Remove @script ..."
    sh "find . -type d -name '*@script' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
    sh "find . -type d -name '*@script' -delete"

    echo "Remove @tmp ..."
    sh "find . -type d -name '*@tmp' | xargs -n1 -P4 -I% rsync --delete-before -a ${env.WORKSPACE}/empty/ %/"
    sh "find . -type d -name '*@tmp' -delete"

    echo "Remove .tar.gz ... "
    sh "find . -type f -name '*.tar.gz' -delete"
}

/**********************************************************************/
/*******************         Pipeline         *************************/
/**********************************************************************/
/*
 * jenkins environment for this pipeline:
 * - GIT_URL: git URL for project to build (job config)
 * - MAIL_RECIPIENTS: comma separated list of mail recipients (jenkins global config)
 * - YOCTO_VERSION: git ref to build (job config)
 * - CLEAN_CACHES (job config)
 */
pipeline {
    agent {
        label 'yocto-kirkstone'
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
                       artifactNumToKeepStr: '3', 
                       daysToKeepStr: '', 
                       numToKeepStr: '10')
        )
        timestamps()
        gitLabConnection('tq-gitlab-server')
    }

    environment {
        /*
         * workspace name for config must be identical to config name
         */
        WS_IMX = "CONFIGS/imx"
        WS_LS = "CONFIGS/ls"
        WS_ML = "CONFIGS/mainline"
        WS_TI = "CONFIGS/ti"
        DL_DIR = "shared-dl-dir"
        BUILD_DIR = "buildspace"
        DEPLOY_DIR = "deployment"
    }

    stages {
        stage ('Cleanup before build') {
            steps {
                cleanupBuild()
            }
        }
        stage ('Checkout') {
            steps {
                updateGitlabCommitStatus name: 'build', state: 'running'
                checkoutMetaLayers("${env.WORKSPACE}")
            }
        }
        stage ('Prepare Workspaces') {
            steps {
                parallel (
                    "imx" : {
                        prepareWorkspace("${env.WS_IMX}")
                    },
                    "ls" : {
                        prepareWorkspace("${env.WS_LS}")
                    },
                    "mainline" : {
                        prepareWorkspace("${env.WS_ML}")
                    },
                    "ti" : {
                        prepareWorkspace("${env.WS_TI}")
                    },
                )
            }
        }
        stage ('Fetch') {
            steps {
                parallel (
                    "imx" : {
                        mirrorConfiguration("${env.WS_IMX}")
                    },
                    "ls" : {
                        mirrorConfiguration("${env.WS_LS}")
                    },
                    "mainline" : {
                        mirrorConfiguration("${env.WS_ML}")
                    },
                    "ti" : {
                        mirrorConfiguration("${env.WS_TI}")
                    },
                )
            }
        }
        stage ('Build') {
            steps {
                parallel (
                    "imx" : {
                        buildConfiguration("${env.WS_IMX}")
                    },
                    "ls" : {
                        buildConfiguration("${env.WS_LS}")
                    },
                    "mainline" : {
                        buildConfiguration("${env.WS_ML}")
                    },
                    "ti" : {
                        buildConfiguration("${env.WS_TI}")
                    },
                )
            }
       }
    }

    post {
        success {
            script {
                if ("${env.gitlabActionType}" != "MERGE") {
                    archiveArtifacts artifacts: "${env.WS_IMX}/*.LIC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_IMX}/*.MIRROR.SRC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_LS}/*.LIC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_LS}/*.MIRROR.SRC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_ML}/*.LIC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_ML}/*.MIRROR.SRC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_TI}/*.LIC.tar.gz"
                    archiveArtifacts artifacts: "${env.WS_TI}/*.MIRROR.SRC.tar.gz"
                    sshagent(['jenkins-master-key']) {
                        sh "export STAMP=\$(${env.WORKSPACE}/ci/git-revision-name.sh \"${env.YOCTO_VERSION}\") && ${env.WORKSPACE}/ci/git-archive-all.sh --format tar.gz --prefix ci-meta-tq.\${STAMP}/ ci-meta-tq.\${STAMP}.tar"
                    }
                    archiveArtifacts artifacts: "ci-meta-tq.*.tar.gz"
                }

                archiveArtifacts artifacts: "${env.WS_IMX}/${env.BUILD_DIR}_*/${env.DEPLOY_DIR}/*"
                archiveArtifacts artifacts: "${env.WS_LS}/${env.BUILD_DIR}_*/${env.DEPLOY_DIR}/*"
                archiveArtifacts artifacts: "${env.WS_ML}/${env.BUILD_DIR}_*/${env.DEPLOY_DIR}/*"
                archiveArtifacts artifacts: "${env.WS_TI}/${env.BUILD_DIR}_*/${env.DEPLOY_DIR}/*"
                cleanupBuild()

                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        unstable {
            emailext (
                to: "${gitlabUserEmail}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """ ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                  Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: false	,
            )
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        failure {
            emailext (
                to: "${gitlabUserEmail}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """\
                ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: false,
            )
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
    }
}
