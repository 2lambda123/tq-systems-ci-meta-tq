/**
 * Copyright (C) 2017 - 2020 TQ-Systems GmbH
 * @author Markus Niebel <Markus.Niebel@tq-group.com>
 * Jenkinsfile for TQ-Systems Yocto-BSPs using declarative pipeline
 * License:     GPLv2
 *
 */

import java.text.*
import groovy.time.*

/**********************************************************************/
/*******************         Functions         ************************/
/**********************************************************************/
def wipeOutWs(){
    dir("${env.WORKSPACE}") {
        echo "Remove ${env.WORKSPACE} ..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@script") {
        echo "Remove ${env.WORKSPACE}@script ..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@tmp") {
        echo "Remove ${env.WORKSPACE}@tmp ..."
        deleteDir()
    }
}

/**********************************************************************/
/* Special submodule handling                                         */
/* we need to be able to exchange the submodule setup                 */
/* therefore                                                          */
/* - add / remove / update submodule url                              */
/* - fetch all repos and clean no longer existing refs                */
/* - update default branch                                            */
/* - do repo maintenance                                              */
/* - force a clean checkout with existing ref to make sure following  */
/*   'git submodule update --init' runs smoothly                      */
/**********************************************************************/
def checkoutMetaLayers(directoryName) {
    dir("${directoryName}") {
        sshagent(['jenkins-master-key']) {
            sh """
            git submodule sync
            git submodule foreach --recursive 'git fetch --prune origin'
            git submodule foreach --recursive 'git remote set-head origin \$(basename \$(git branch -r | tail -1))'
            git submodule foreach --recursive 'git gc'
            git submodule foreach --recursive 'git reset --hard origin/HEAD'
            git submodule foreach --recursive 'git clean -fdx'
            git submodule update --init
            git clean -fdx sources/templates
            git clean -fx"""
        }
    }
}

def prepareWorkspace(directoryName){
    if (params.CLEAN_CACHES == true) {
        dir("${directoryName}/${env.BUILD_DIR}") {
            echo "Remove ${directoryName}/${env.BUILD_DIR} ... (CLEAN_CACHES)"
            deleteDir()
        }
    }
    checkout([
        $class: 'GitSCM',
        branches: [[name: "${YOCTO_VERSION}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
            [$class: 'SubmoduleOption',
                disableSubmodules: true,
                parentCredentials: true,
                recursiveSubmodules: true,
                reference: '',
                trackingSubmodules: false
            ],
            [$class: 'RelativeTargetDirectory',
                relativeTargetDir: "${directoryName}"
            ],
            [$class: 'PruneStaleBranch'],
        ],
        submoduleCfg: [],
        userRemoteConfigs: [[
            credentialsId: 'jenkins-master-key',
            url: "${env.GIT_URL}"
        ]]
    ])
    echo "create shared DL_DIR ${env.WORKSPACE}/${env.DL_DIR} ..."
    sh "mkdir -p ${env.WORKSPACE}/${env.DL_DIR}"
}

/**********************************************************************/
/* create missing mirror packages using build-all script.             */
/* use separate build directory since other config options are used   */
/* clean mirror build dir to prevent old downloads are copied into    */
/* shared dl dir                                                      */
/**********************************************************************/
def mirrorConfiguration(directoryName) {
    dir("${directoryName}") {
        sshagent(['jenkins-master-key']) {
           echo "create mirror packages for all machines of config ${directoryName} ..."
           sh "rm -rf ${env.BUILD_DIR}-mirror"
           sh "./ci/build-all ${env.BUILD_DIR}-mirror \$(basename \$(pwd)) mirror"
           sh "cp -ruv ${env.BUILD_DIR}-mirror/downloads/* ${env.WORKSPACE}/${env.DL_DIR}"
        }
    }
}

/**********************************************************************/
/* build images for all machines using build-all script.              */
/* The given directory name must match the configuration name         */
/* which is needed as parameter for the build-all script              */
/* Note:                                                              */
/* all configurations use a shared dl dir                             */
/* the build node should have the path to SSTATE_DIR in the site.conf */
/**********************************************************************/
def buildConfiguration(directoryName) {
    dir("${directoryName}") {
        echo "build all machines for config ${directoryName} ..."
        sh "export DL_DIR=${env.WORKSPACE}/${env.DL_DIR} && ./ci/build-all ${env.BUILD_DIR} \$(basename \$(pwd)) ci"
    }
}

def wipeOutBuildspace(directoryName){
    dir("${directoryName}/${env.BUILD_DIR}/${env.DEPLOY_DIR}") {
        echo "Remove ${directoryName}/${env.BUILD_DIR}/${env.DEPLOY_DIR} ..."
        deleteDir()
    }
    dir("${directoryName}@script") {
        echo "Remove ${directoryName}@script ..."
        deleteDir()
    }
    dir("${directoryName}@tmp") {
        echo "Remove ${directoryName}@tmp ..."
        deleteDir()
    }
}

/*
 * delete complete build dir for manual triggered builds (RELEASE) and nightly
 * builds (timer triggered)
 * use shell rm in favour of dir/deleteDir
 *
 * since version 2.24 of workflow-support plugin currentBuild.getBuildCauses()
 * can be used. as an additional benefit - this method is whitelisted  - no need
 * for manual script security exclusions
 */
def handleBuildCause(directoryName) {
    def causes = currentBuild.getBuildCauses()
    println causes.toString()

    for(cause in causes) {
        def reason = cause.toString()
        cause = null
        if (reason.contains("TimerTriggerCause")) {
            println "This job was caused by Timer, rm tmp ... (NIGHTLY)"
            sh "rm -rf ${directoryName}/${env.BUILD_DIR}/tmp"
        } else if (reason.contains("UserIdCause")) {
            println "This job was caused by user, rm ${env.BUILD_DIR} ... (RELEASE)"
            sh "rm -rf ${directoryName}/${env.BUILD_DIR}"
        } else {
            println "build cause : " + reason
        }
    }
    causes = null
}

def handleGlobalData(directoryName) {
    def causes = currentBuild.getBuildCauses()

    for(cause in causes) {
        def reason = cause.toString()
        cause = null
        /*
         * for all build cases other then SCM triggered rebuild delete the
         * DL_DIR
         */
        if (!reason.contains("SCMTriggerCause")) {
            println "clear ${directoryName}/${env.DL_DIR} ..."
            sh "pwd; ls -al; time rm -rf ${directoryName}/${env.DL_DIR}; ls -1"
        }
    }
    causes = null

    /*
     * last ressort only: clean SSTATE_CACHE
     */
    if (params.CLEAN_CACHES == true) {
        println "CLEAN_CACHES not supported for shared SSTATE_CACHE"
    }

    /*
     * remove old archives
     */
    echo "clear ${directoryName}/*.tar.gz ... "
    sh "rm -f ${directoryName}/*.tar.gz"
}

/**********************************************************************/
/*******************         Pipeline         *************************/
/**********************************************************************/
/*
 * jenkins environment for this pipeline:
 * - GIT_URL: git URL for project to build (job config)
 * - MAIL_RECIPIENTS: comma separated list of mail recipients (jenkins global config)
 * - YOCTO_VERSION: git ref to build (job config)
 * - CLEAN_CACHES (job config)
 */
pipeline {
    agent {
        label 'yocto-rocko'
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
                       artifactNumToKeepStr: '3', 
                       daysToKeepStr: '', 
                       numToKeepStr: '10')
        )
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        /*
         * workspace name for config must be identical to config name
         */
        WS_IMX = "CONFIGS/imx"
        WS_MIN = "CONFIGS/minimal"
        WS_TI = "CONFIGS/ti"
        DL_DIR = "shared-dl-dir"
        BUILD_DIR = "buildspace"
        DEPLOY_DIR = "deployment"
    }

    stages {
        stage ('Manage sstate cache') {
            steps {
                /*
                 * manageSstateCache(currentBuild.startTimeInMillis()) does not work
                 * this helps to explicit clean state cache
                 */
                handleGlobalData("${env.WORKSPACE}")
            }
        }
        stage ('Prepare Workspaces') {
            steps {
                parallel (
                    "imx" : {
                        wipeOutBuildspace("${env.WS_IMX}")
                        prepareWorkspace("${env.WS_IMX}")
                    },
                    "minimal" : {
                        wipeOutBuildspace("${env.WS_MIN}")
                        prepareWorkspace("${env.WS_MIN}")
                    },
                    "ti" : {
                        wipeOutBuildspace("${env.WS_TI}")
                        prepareWorkspace("${env.WS_TI}")
                    },
                )
            }
        }
        stage('handle build cause') {
            steps {
                parallel (
                    "imx" : {
                        handleBuildCause("${env.WS_IMX}")
                    },
                    "minimal" : {
                        handleBuildCause("${env.WS_MIN}")
                    },
                    "ti" : {
                        handleBuildCause("${env.WS_TI}")
                    },
                )
            }
        }
        stage ('Checkout all meta-layers') {
            steps {
                parallel (
                    "imx" : {
                        checkoutMetaLayers("${env.WS_IMX}")
                    },
                    "minimal" : {
                        checkoutMetaLayers("${env.WS_MIN}")
                    },
                    "ti" : {
                        checkoutMetaLayers("${env.WS_TI}")
                    },
                )
            }
        }
        stage ('Fetch'){
            steps {
                parallel (
                    "imx" : {
                        mirrorConfiguration("${env.WS_IMX}")
                    },
                    "minimal" : {
                        mirrorConfiguration("${env.WS_MIN}")
                    },
                    "ti" : {
                        mirrorConfiguration("${env.WS_TI}")
                    },
                )
            }
        }
        stage ('Build'){
            steps {
                parallel (
                    "imx" : {
                        buildConfiguration("${env.WS_IMX}")
                    },
                    "minimal" : {
                        buildConfiguration("${env.WS_MIN}")
                    },
                    "ti" : {
                        buildConfiguration("${env.WS_TI}")
                    },
                )
            }
       }
       stage ('Archive'){
            steps {
                script {
                    checkoutMetaLayers("${env.WORKSPACE}")
                    sshagent(['jenkins-master-key']) {
                        sh "export STAMP=\$(${env.WORKSPACE}/ci/git-revision-name.sh \"${env.YOCTO_VERSION}\") && ${env.WORKSPACE}/ci/git-archive-all.sh --format tar.gz --prefix ci-meta-tq.\${STAMP}/ ci-meta-tq.\${STAMP}.tar"
                    }
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "${env.WS_IMX}/${env.BUILD_DIR}/${env.DEPLOY_DIR}/*"
            wipeOutBuildspace("${env.WS_IMX}")
            archiveArtifacts artifacts: "${env.WS_MIN}/${env.BUILD_DIR}/${env.DEPLOY_DIR}/*"
            wipeOutBuildspace("${env.WS_MIN}")
            archiveArtifacts artifacts: "${env.WS_TI}/${env.BUILD_DIR}/${env.DEPLOY_DIR}/*"
            wipeOutBuildspace("${env.WS_TI}")
            archiveArtifacts artifacts: "ci-meta-tq.*.tar.gz"
        }
        unstable {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """ ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                  Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
        failure {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """\
                ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
    }
}
