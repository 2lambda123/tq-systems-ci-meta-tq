/**
 * Jenkinsfile for Yocto-BSPs using declarative pipeline
 */

/**********************************************************************/
/*******************         Functions         ************************/
/**********************************************************************/
def wipeOutWs(){
    dir("${env.WORKSPACE}") {
        echo "Remove ${env.WORKSPACE}..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@script") {
        echo "Remove ${env.WORKSPACE}@script..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@tmp") {
        echo "Remove ${env.WORKSPACE}@tmp..."
        deleteDir()
    }
}

def checkoutMetaLayers(directoryName) {
    dir("${directoryName}") {
        sh """
        rm -rf buildspace
        git clean -fdx
        git submodule sync
        git submodule update --init"""
    }
}

def prepareWorkspace(directoryName){
    checkout([
        $class: 'GitSCM',
        branches: [[name: "${YOCTO_VERSION}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
            [$class: 'RelativeTargetDirectory',
                relativeTargetDir: "${directoryName}"
            ],
            [$class: 'PruneStaleBranch'],
        ],
        submoduleCfg: [],
        userRemoteConfigs: [
            [url: "${env.GIT_URL}"]
        ]
    ])
}

def wipeOutBuildspace(directoryName){
    dir("${directoryName}") {
        echo "Remove ${directoryName}..."
        deleteDir()
    }
}

/**********************************************************************/
/*******************         Pipeline         *************************/
/**********************************************************************/
/*
 * jenkins environment for this pipeline:
 * - GIT_URL: git URL for projebt to build
 * - MAIL_RECIPIENTS: comma separated list of mail recipients
 */
pipeline {
    agent {
        label 'master'
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
                       artifactNumToKeepStr: '3', 
                       daysToKeepStr: '', 
                       numToKeepStr: '10')
        )
        disableConcurrentBuilds()
    }
    triggers {
            cron('H H(0-4) * * *')
            pollSCM('''# Alle f√ºnf Minuten von 7.00-20.00 an jedem Wochentag
                H/5 7-20 * * 1-5''')
    }

    environment {
        WS_MFG = "CONFIGS/mfgtool"
        WS_GUI = "CONFIGS/gui"
        WS_MIN = "CONFIGS/minimal"
    }

    stages {
        stage ('Prepare Workspaces') {
            steps {
                parallel (
                    "gui" : {
                        prepareWorkspace("${env.WS_GUI}")
                    },
                    "minimal" : {
                        prepareWorkspace("${env.WS_MIN}")
                    },
                    "mfgtool" : {
                        prepareWorkspace("${env.WS_MFG}")
                    }
                )
            }
        }
        stage ('Checkout all meta-layers') {
            steps {
                parallel (
                    "gui" : {
                        checkoutMetaLayers("${env.WS_GUI}")
                    },
                    "minimal" : {
                        checkoutMetaLayers("${env.WS_MIN}")
                    },
                    "mfgtool" : {
                        checkoutMetaLayers("${env.WS_MFG}")
                    }
                )
            }
        }
        stage ('Build'){
            steps {
                parallel (
                    "gui" : {
                        dir("${env.WS_GUI}") {
                            sh "export SSTATE_DIR=${env.WORKSPACE}/shared-sstate-cache && ./ci/build-all buildspace \$(basename \$(pwd)) ci"
                        }
                    },
                    "minimal" : {
                        dir("${env.WS_MIN}") {
                            sh "export SSTATE_DIR=${env.WORKSPACE}/shared-sstate-cache && ./ci/build-all buildspace \$(basename \$(pwd)) ci"
                        }
                    },
                    "mfgtool" : {
                        dir("${env.WS_MFG}") {
                            sh "export SSTATE_DIR=${env.WORKSPACE}/shared-sstate-cache && ./ci/build-all buildspace \$(basename \$(pwd)) ci"
                        }
                    }
                )
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "${env.WS_GUI}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_GUI}")
            archiveArtifacts artifacts: "${env.WS_MIN}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_MIN}")
            archiveArtifacts artifacts: "${env.WS_MFG}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_MFG}")
        }
        unstable {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """ ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                  Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
        failure {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """\
                ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
    }
}
