/**
 * Jenkinsfile for Yocto-BSPs using declarative pipeline
 *
 */

import java.text.*
import groovy.time.*

/**********************************************************************/
/*******************         Functions         ************************/
/**********************************************************************/
def wipeOutWs(){
    dir("${env.WORKSPACE}") {
        echo "Remove ${env.WORKSPACE} ..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@script") {
        echo "Remove ${env.WORKSPACE}@script ..."
        deleteDir()
    }
    dir("${env.WORKSPACE}@tmp") {
        echo "Remove ${env.WORKSPACE}@tmp ..."
        deleteDir()
    }
}

def checkoutMetaLayers(directoryName) {
    dir("${directoryName}") {
        sh """
        git submodule sync
        git submodule update --init
        git submodule foreach --recursive git clean -fdx
        git submodule foreach --recursive 'git checkout ./*'
        git clean -fdx sources templates
        git clean -fx"""
    }
}

def prepareWorkspace(directoryName){
    if (params.CLEAN_CACHES == true) {
        dir("${directoryName}/buildspace") {
            echo "Remove ${directoryName}/buildspace ... (CLEAN_CACHES)"
            deleteDir()
        }
    }
    checkout([
        $class: 'GitSCM',
        branches: [[name: "${YOCTO_VERSION}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
            [$class: 'RelativeTargetDirectory',
                relativeTargetDir: "${directoryName}"
            ],
            [$class: 'PruneStaleBranch'],
        ],
        submoduleCfg: [],
        userRemoteConfigs: [
            [url: "${env.GIT_URL}"]
        ]
    ])
}

def buildConfiguration(directoryName) {
    dir("${directoryName}") {
        echo "build all machines for config ${directoryName} ..."
        sh "export SSTATE_DIR=${env.WORKSPACE}/shared-sstate-cache && export DL_DIR=${env.WORKSPACE}/shared-dl-dir && ./ci/build-all buildspace \$(basename \$(pwd)) ci"
    }
}

def wipeOutBuildspace(directoryName){
    dir("${directoryName}/buildspace/deployment") {
        echo "Remove ${directoryName}/buildspace/deployment ..."
        deleteDir()
    }
    dir("${directoryName}@script") {
        echo "Remove ${directoryName}@script ..."
        deleteDir()
    }
    dir("${directoryName}@tmp") {
        echo "Remove ${directoryName}@tmp ..."
        deleteDir()
    }
}

/*
 * delete complete build dir for manual triggered builds (RELEASE) and nightly
 * builds (timer triggered)
 * use shell rm in favour of dir/deleteDir
 * needs to be implemented as non serializable funtion
 * currentBuild.rawBuild.getCauses needs to be accepted by script security plugin
 */
@NonCPS
def handleBuildCause(directoryName) {
    def causes = currentBuild.rawBuild.getCauses()
    for(cause in causes) {
        def reason = cause.class.toString()
        cause = null
        if (reason.contains("TimerTriggerCause")) {
            println "This job was caused by Timer, rm tmp ... (NIGHTLY)"
            sh "rm -rf ${directoryName}/buildspace/tmp"
        } else if (reason.contains("UserIdCause")) {
            println "This job was caused by user, rm buildspace ... (RELEASE)"
            sh "rm -rf ${directoryName}/buildspace"
        } else {
            println "build cause : " + reason
        }
    }
    causes = null
}

@NonCPS
def handleGlobalData(directoryName) {
    def causes = currentBuild.rawBuild.getCauses()
    for(cause in causes) {
        def reason = cause.class.toString()
        cause = null
        if (!reason.contains("SCMTriggerCause")) {
            println "clear ${directoryName}/shared-dl-dir ..."
            sh "pwd; ls -al; time rm -rf ${directoryName}/shared-dl-dir; ls -1"
        }
    }
    causes = null

    if (params.CLEAN_CACHES == true) {
        println "clear ${directoryName}/shared-state-dir ... (CLEAN_CACHES)"
        sh "pwd; ls -al; time rm -rf ${directoryName}/shared-state-dir; ls -1"
    }

    echo "clear ${directoryName}/ci-meta-tq.*.tar.gz ... "
    sh "rm -f ${directoryName}/ci-meta-tq.*.tar.gz"
}
/**********************************************************************/
/*******************         Pipeline         *************************/
/**********************************************************************/
/*
 * jenkins environment for this pipeline:
 * - GIT_URL: git URL for project to build (job config)
 * - MAIL_RECIPIENTS: comma separated list of mail recipients (jenkins global config)
 * - YOCTO_VERSION: git ref to build (job config)
 * - CLEAN_CACHES (job config)
 */
pipeline {
    agent {
        label 'master'
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', 
                       artifactNumToKeepStr: '3', 
                       daysToKeepStr: '', 
                       numToKeepStr: '10')
        )
        disableConcurrentBuilds()
    }
    triggers {
            cron('H H(0-4) * * *')
            pollSCM('''# Alle f√ºnf Minuten von 7.00-20.00 an jedem Wochentag
                H/5 7-20 * * 1-5''')
    }

    environment {
/*        WS_MFG = "CONFIGS/mfgtool" */
        WS_IMX = "CONFIGS/imx"
        WS_MIN = "CONFIGS/minimal"
/*        WS_TI = "CONFIGS/ti" */
    }

    stages {
        stage ('Manage sstate cache') {
            steps {
                /*
                 * manageSstateCache(currentBuild.startTimeInMillis()) does not work
                 * this helps to explicit clean state cache
                 */
                handleGlobalData("${env.WORKSPACE}")
            }
        }
        stage ('Prepare Workspaces') {
            steps {
                parallel (
                    "imx" : {
                        wipeOutBuildspace("${env.WS_IMX}")
                        prepareWorkspace("${env.WS_IMX}")
                    },
                    "minimal" : {
                        wipeOutBuildspace("${env.WS_MIN}")
                        prepareWorkspace("${env.WS_MIN}")
                    },
/*
                    "ti" : {
                        wipeOutBuildspace("${env.WS_TI}")
                        prepareWorkspace("${env.WS_TI}")
                    },
*/
/*
                    "mfgtool" : {
                        wipeOutBuildspace("${env.WS_MFG}")
                        prepareWorkspace("${env.WS_MFG}")
                    }
*/
                )
            }
        }
        stage('handle build cause') {
            steps {
                parallel (
                    "imx" : {
                        handleBuildCause("${env.WS_IMX}")
                    },
                    "minimal" : {
                        handleBuildCause("${env.WS_MIN}")
                    },
/*
                    "ti" : {
                        handleBuildCause("${env.WS_TI}")
                    },
*/
/*
                    "mfgtool" : {
                        handleBuildCause("${env.WS_MFG}")
                    },
*/
                )
            }
        }
        stage ('Checkout all meta-layers') {
            steps {
                parallel (
                    "imx" : {
                        checkoutMetaLayers("${env.WS_IMX}")
                    },
                    "minimal" : {
                        checkoutMetaLayers("${env.WS_MIN}")
                    },
/*
                    "ti" : {
                        checkoutMetaLayers("${env.WS_TI}")
                    },
*/
/*
                    "mfgtool" : {
                        checkoutMetaLayers("${env.WS_MFG}")
                    }
*/
                )
            }
        }
        stage ('Build'){
            steps {
                parallel (
                    "imx" : {
                        buildConfiguration("${env.WS_IMX}")
                    },
                    "minimal" : {
                        buildConfiguration("${env.WS_MIN}")
                    },
/*
                    "ti" : {
                        buildConfiguration("${env.WS_TI}")
                    },
*/
/*
                    "mfgtool" : {
                        buildConfiguration("${env.WS_MFG}")
                    }
*/
                )
            }
       }
       stage ('Archive'){
            steps {
                script {
                    checkoutMetaLayers("${env.WORKSPACE}")
                    sh "export STAMP=\$(${env.WORKSPACE}/ci/git-revision-name.sh) && ${env.WORKSPACE}/ci/git-archive-all.sh --format tar.gz --prefix ci-meta-tq.\${STAMP}/ ci-meta-tq.\${STAMP}.tar"
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "${env.WS_IMX}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_IMX}")
            archiveArtifacts artifacts: "${env.WS_MIN}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_MIN}")
/*
            archiveArtifacts artifacts: "${env.WS_TI}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_TI}")
*/
/*
            archiveArtifacts artifacts: "${env.WS_MFG}/buildspace/deployment/*"
            wipeOutBuildspace("${env.WS_MFG}")
*/
            archiveArtifacts artifacts: "ci-meta-tq.*.tar.gz"
        }
        unstable {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """ ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                  Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
        failure {
            emailext (
                to: "${env.MAIL_RECIPIENTS}",
                subject: "Build Notification: ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}!",
                body: """\
                ${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.result}:
                Check console output at ${env.BUILD_URL} to view the results.""",
                attachLog: true,
            )
        }
    }
}
