#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2017-2024 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Martin Schmiedel
#
# Description: build all machines in a layer with a given config
#
###############################################################################
set -e
set -C # noclobber

# TRAP SIGNALS
trap 'error_abort $LINENO' ERR

function error_abort () {
	echo "error at $1"
}

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

# depends on bitbake / poky version
readonly BITBAKE_GIT_MIRROR_PKG_EXTENSION="tar.gz"

. ${SCRIPTPATH}/utils

usage() {
	cat <<END
Usage:

${SCRIPTNAME} <build-dir> [template] [--dryrun] [--debug]

<build-dir>: specifies the build directory location (required)
[template]: template bblayers.conf to use
[-h|--help]: print this message
[--dryrun]: call bitbake in dry-run mode
[--devel]: allow development mode (use different auto.conf to disable CI features)
[--debug]: print additional informations
[--archive=<yes|no>]: en/disable tarball generation, default no
[--deploydir=<directory>]: deploy to this directory (only if --archive=yes)
[--skipbitbake]: don't call bitbake

If the variable "LOCAL" is defined in environment of ${SCRIPT}, the
variables "DISTRO_LIST", "MACHINE_LIST" and "IMAGE_LIST" can be used
to define what is built. Otherwise the lists are calculated.
END
}

#
# generate version and source info for a virtual package
#
# Query SRCREV and SRC_URI if there is a provider for the virtual package.
# output the information to the given file. Used for machine specific build
# information. The source must be under version control, e.g. git, to query SRCREV.
#
# $1 output file (file to append)
# $2 target - virtual target to query (e.g. kernel for virtual/kernel)
#
print_virtual_provider_info () {
	local recipe=$(bitbake-getvar --quiet --value PREFERRED_PROVIDER_virtual/${2} 2>/dev/null)
	if ! [ -z ${recipe} ] && ! [ ${recipe} = "None" ]; then
		local srcrev=$(bitbake-getvar --quiet --value --recipe ${recipe} SRCREV 2>/dev/null)
		local srcuri=$(bitbake-getvar --quiet --value --recipe ${recipe} SRC_URI 2>/dev/null)
		cat >>${1} <<END

virtual/${2}:
URI:     $(for uri in ${srcuri}; do echo ${uri}; done)
COMMIT:  ${srcrev}
END
	else
		cat >>${1} <<END

virtual/${2}:
no source info
END
	fi
}

main () {
	local archive="no"
	# default
	local deploydir=$(readlink -f ./deployment)
	pos_params=""

	while (( "$#" )); do
		case "$1" in
		-h|--help )
			usage
			return 0
			;;
		--archive=* )
			archive=${1#*=}
			shift
			;;
		--debug )
			DEBUG="on"
			shift
			;;
		--dryrun )
			dryrun="on"
			shift
			;;
		--deploydir=* )
			deploydir=$(readlink -f ${1#*=})
			shift
			;;
		--devel )
			develmode="on"
			shift
			;;
		--skipbitbake )
			skipbitbake="on"
			shift
			;;
		-*|--*=) # unsupported flags
			error_out "Error: Unsupported flag $1"
			exit 1
			;;
		*) # preserve positional arguments
			pos_params="$pos_params $1"
			shift
			;;
		esac
	done

	if [ ! -z ${dryrun} ]; then
		bitbake_args="--dry-run"
	fi

	if [ "${archive}" = "yes" ]; then
		if [ ! -z ${dryrun} ] || [ ! -z ${skipbitbake} ]; then
			info "Disabling archive in dry-run / skip-bitbake mode"
			archive="no"
		fi
	fi

	# set positional arguments in their proper place
	eval set -- "$pos_params"

	if [ $# -lt 1 ]
	then
		usage
		exit 1
	fi

	local build_dir=${1}
	local config="mainline"
	if ! [ -z "${2}" ]
	then
		config=${2}
	fi

	local top_dir=$(pwd)
	local build_info_file="${deploydir}/${config}-build_info"
	local distros=$(get_distros_for_config "${config}")
	local machines=$(get_machines "${config}")
	local stamp=$(${SCRIPTPATH}/git-revision-name.sh "${YOCTO_VERSION}")

	if [ "${archive}" = "yes" ]
	then
		# cleanup any old deployment
		if [ -d "${deploydir}" ]; then
			rm -rf "${deploydir}"
		fi
		mkdir -p ${deploydir}

		# create a file containing information about sources we built from
		printf "git commit info:\n" > ${build_info_file}
		git log -1 >> "${build_info_file}"
		printf "\ngit submodule info:\n" >> ${build_info_file}
		git submodule foreach --quiet 'echo "$name:\n\tURL: $(git remote get-url origin)\n\tREV: $(git log --format="%H" -1) $(git describe --all $(git log --format="%H" -1))"' >>  "${build_info_file}"
	fi

	debug "Machines to build: ${machines}"
	debug "Distros to build: ${distros}"

	for distro in ${distros}
	do
		# GENERAL

		local images=$(get_images ${distro})
		debug "Images to build: ${images}"

		# source the real setup workhorse
		export EULA="y"
		export DISTRO=${distro}
		export MACHINE=$(echo ${machines} | awk '{ print $1 }')

		# clean conf, to enforce a really clean configuration and to enable
		# incremental changes in the config using our template dir
		rm -rf ${build_dir}_${distro}/conf

		# although DISTRO and MACHINE are exported, setup-environment
		# uses these variable mainly to set default in local.conf
		# afterwards they can be set again to iterate over all buildable
		# machines
		if ! . ./setup-environment ${build_dir}_${distro} ${config}
		then
			error_out "sourcing setup-environment failed"
		fi

		info "build images"
		#
		# config bitbake from autoconf template
		#
		if [ -z ${develmode} ]
		then
			do_create_auto_conf "ci"
		else
			do_create_auto_conf
		fi

		if ! [ -z ${SSTATE_DIR} ]; then
			# add SSTATE dir outside of builddir, optimize global builds
			assign_or_replace SSTATE_DIR ${SSTATE_DIR} "=" conf/local.conf
		else
			info "env SSTATE_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi

		if ! [ -z ${DL_DIR} ]; then
			# add DL_DIR dir outside of builddir, optimize global builds
			assign_or_replace DL_DIR ${DL_DIR} "=" conf/local.conf

		else
			info "env DL_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi

		for img in ${images}
		do
			# now force bitbake to generate images for all targets ...
			for machine in ${machines}
			do
				# overwrite MACHINE
				export MACHINE=${machine}
				# create image for $MACHINE
				info "baking: ${machine} ${distro} ${img} ..."

				if [ -z ${skipbitbake} ]
				then
					if ! bitbake ${bitbake_args} ${img}
					then
						error_out "bitbake ${bitbake_args} ${img} for ${MACHINE} failed"
					fi
				fi
			done
		done
		if [ "${archive}" = "yes" ]
		then
			# note: this depends on a selected distro
			local distro_codename=$(bitbake-getvar -q --value DISTRO_CODENAME)

			for machine in ${machines}; do
				# export $MACHINE before query bitbake
				export MACHINE=${machine}
				local artifactsdir=$(bitbake-getvar -q --value DEPLOY_DIR_IMAGE)
				local machine_archive=${machine}_${config}_${distro_codename}_${distro}_${stamp}
				info "archiving ${machine} ..."
				# we create some files in ${ARTIFACTSDIR}, clean them before recreate
				rm -f "${artifactsdir}"/*.info
				rm -f "${artifactsdir}"/*.md5sum
				# create a file containing md5sum of files
				get_md5sum "${artifactsdir}" > "${deploydir}/${machine_archive}.md5sum"
				cp "${deploydir}/${machine_archive}.md5sum" "${artifactsdir}"
				# use pregenerated build info
				cp "${build_info_file}" "${artifactsdir}/${machine_archive}.info"
				# enrich with machine specific information for some virtual packages
				print_virtual_provider_info "${artifactsdir}/${machine_archive}.info" kernel
				print_virtual_provider_info "${artifactsdir}/${machine_archive}.info" bootloader
				# TODO:
				# 1) add more packages if needed
				# 2) we have different recipes and use different sources for TF-A / trusted-firmware-a
				# Should atf-imx / qoriq-atf etc. labeled as PREFERRED_PROVIDER? If yes, this should go upstream.
				# print_virtual_provider_info "${artifactsdir}/${machine_archive}.info" "trusted-firmware-a"

				# create image archive for $MACHINE, assume DEPLOY_DIR_IMAGE has ${MACHINE} as final part
				if ! tar -cvf ${deploydir}/${machine_archive}.BIN.tar.gz \
					-C "$(dirname "${artifactsdir}")" \
					"$(basename "${artifactsdir}")" --use-compress-program=pigz
				then
					error_out "archiving for ${machine} failed"
				fi

				# add some artifact unpacked for automated testing
				# TODO: should we use bitbake variables here?
				mkdir -p ${deploydir}/${machine}
				find ${artifactsdir} -name *-${machine}.wic -exec cp "{}" ${deploydir}/${machine}/ \;
				find ${artifactsdir} -name *-${machine}.tar.gz -exec cp "{}" ${deploydir}/${machine}/ \;
				local kernel_dtb=$(bitbake-getvar --recipe virtual/kernel --quiet --value KERNEL_DEVICETREE)
				for dtb in ${kernel_dtb}; do
					cp "${artifactsdir}/$(basename ${dtb})" "${deploydir}/${machine}/"
				done
				local kimage=$(bitbake-getvar --recipe virtual/kernel --quiet --value KERNEL_IMAGETYPE)
				cp ${artifactsdir}/${kimage} ${deploydir}/${machine}/
				# TODO: discuss if we need modules for multiple kernel test
				find ${artifactsdir} -type f -name modules*.tgz -exec cp "{}" ${deploydir}/${machine}/ \;
			done
		fi

		cd ${top_dir}
	done
	if [ "${archive}" = "yes" ]
	then
		# create licenses and mirror archive
		local archive_basename=${config}_${stamp}

		mkdir -p ${archive_basename}.LIC
		# copy the file from licenses
		local licenses_src_path=$(ls -d ${build_dir}_*/tmp*/deploy/licenses/*)
		for f in ${licenses_src_path}; do
			cp -r "${f}" ${archive_basename}.LIC;
		done

		tar -cvf ${archive_basename}.LIC.tar.gz ${archive_basename}.LIC --use-compress-program=pigz
		# do some cleanup
		rm -rf ${archive_basename}.LIC

		mkdir -p ${archive_basename}.MIRROR.SRC
		DL_DIR=$(bitbake-getvar -q --value DL_DIR)
		# query all archived sources, needs archiver class in config
		local archived_src_path=$(ls -1 ${build_dir}_*/tmp*/deploy/sources/*/*/*)

		# copy the file from archived sources if it exists in DL_DIR
		for f in ${archived_src_path}; do
			local filename="${DL_DIR}/$(basename ${f})"
			if [ -e ${filename} ]; then
				cp "${filename}" ${archive_basename}.MIRROR.SRC;
			else
				debug "$f has no counterpart ${filename}"
			fi
		done
		#
		# we assume here that bitbake is configured to use shallow cloning
		# and that packages are tar.gz''
		#
		local archive_git=$(ls -1 ${DL_DIR}/gitshallow_*.${BITBAKE_GIT_MIRROR_PKG_EXTENSION})
		local archive_gitsm=$(ls -1 ${DL_DIR}/gitsmshallow_*.${BITBAKE_GIT_MIRROR_PKG_EXTENSION})
		for f in ${archive_git}; do
			cp "${f}" ${archive_basename}.MIRROR.SRC;
		done
		for f in ${archive_gitsm}; do
			cp "${f}" ${archive_basename}.MIRROR.SRC;
		done

		tar -cvf ${archive_basename}.MIRROR.SRC.tar.gz ${archive_basename}.MIRROR.SRC --use-compress-program=pigz
		# do some cleanup
		rm -rf ${archive_basename}.MIRROR.SRC
	fi
}

main "${@}"
